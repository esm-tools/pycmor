[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
    "versioneer[toml]==0.29",
]
build-backend = "setuptools.build_meta"

[project]
name = "pycmor"
description = "Makes CMOR Simple"
readme = {file = "README.rst", content-type = "text/x-rst"}
license = {text = "MIT"}
authors = [
    {name = "Paul Gierz", email = "pgierz@awi.de"},
]
maintainers = [
    {name = "Paul Gierz", email = "pgierz@awi.de"},
]
requires-python = ">=3.9"
dynamic = ["version"]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Atmospheric Science",
    "Topic :: Scientific/Engineering :: Oceanography",
    "License :: OSI Approved :: MIT License",
]

keywords = ["cmor", "climate", "data", "netcdf", "cmip"]

# NOTE: Please keep this list sorted! In vim, you can use
# visual-block mode (Ctrl-V) to select the lines and then `:sort`.
dependencies = [
    "bokeh>=3.4.3",
    "cerberus>=1.3.5",
    "cf_xarray>=0.9.4",
    "cftime>=1.6.4",
    "chemicals>=1.2.0",
    "click-loguru>=1.3.8",
    "dask>=2024.8.0",
    "dask_jobqueue>=0.8.5",
    "deprecation>=2.1.0",
    "distributed>=2024.8.0",
    "dpath>=2.2.0",
    "everett[yaml]>=3.4.0",
    "flexparser>=0.3.1,<0.4",  # NOTE(PG): See https://tinyurl.com/ypf99xnh
    "flox>=0.9.10",
    "h5netcdf>=1.4.1",
    "imohash>=1.1.0",
    "joblib>=1.4.2",
    "netcdf4>=1.7.2",
    "numbagg>=0.8.2,<0.9.0",  # Pin to avoid TypeAlias import issue in Python 3.9
    "numpy>=1.26.4",
    "pendulum>=3.0.0",
    "pint-xarray>=0.4,<0.6.0",
    "prefect[dask]>=3.0.3",
    "pyyaml>=6.0.2",
    "questionary>=2.0.1",
    "randomname>=0.2.1",
    "semver>=3.0.4",
    "rich-click>=1.8.3",
    "streamlit>=1.38.0",
    "tqdm>=4.67.0",
    "versioneer>=0.29",
    "xarray>=2024.7.0",
]

[project.optional-dependencies]
dev = [
    "black>=24.8.0",
    "dill>=0.3.8",
    "flake8>=7.1.1",
    "isort>=5.13.2",
    "pooch>=1.8.2",
    "pre-commit>=4.2.0",
    "pyfakefs>=5.6.0",
    "pytest>=8.3.2",
    "pytest-asyncio>=0.23.8",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.1",
    "sphinx>=7.4.7",
    "sphinx_rtd_theme>=2.0.0",
    "yamllint>=1.37.1",
]

doc = [
    "sphinx-book-theme>=1.1.4",
    "sphinx-click>=6.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-tabs>=3.4.5",
    "sphinx-toolbox>=3.7.0",
    "sphinx_jinja>=2.0.2",
    "sphinxcontrib-napoleon>=0.7",
    "watchdog[watchmedo]>=4.0.1",
]

fesom = [
    # NOTE(PG): pyfesom2 is now auto-publishing (GH pyfesom2 #215)
    #           See the relevant information in shell::
    #
    #             $ gh pr view 215 --repo fesom/pyfesom2
    "pyfesom2",
]

[project.urls]
Homepage = "https://github.com/esm-tools/pycmor"
Repository = "https://github.com/esm-tools/pycmor"
Documentation = "https://pycmor.readthedocs.io"
"Bug Tracker" = "https://github.com/esm-tools/pycmor/issues"

[project.scripts]
# Canonical entry point
pycmor = "pycmor.cli:main"
# Backward-compatible alias for one transition release
pymor = "pycmor.cli:main"

[project.entry-points."pycmor.cli_subcommands"]
plugins = "pycmor.core.plugins:plugins"
externals = "pycmor.core.externals:externals"

[project.entry-points."pymor.cli_subcommands"]
# Backward-compatible plugin group for existing plugins
plugins = "pycmor.core.plugins:plugins"
externals = "pycmor.core.externals:externals"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
pycmor = ["data/*.yaml", "data/cmip7/all_var_info.json"]

# Versioneer configuration
[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "src/pycmor/_version.py"
versionfile_build = "pycmor/_version.py"
tag_prefix = "v"
parentdir_prefix = "pycmor-"

# Black configuration
[tool.black]
line-length = 120
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | cmip6-cmor-tables
    | CMIP7_DReq_Software
  )/
  | _version\.py
  | versioneer\.py
)
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
extend_skip_glob = [
    "cmip6-cmor-tables/*",
    "CMIP7_DReq_Software/*",
    "*/_version.py",
    "versioneer.py"
]

# Flake8 configuration
[tool.flake8]
max-line-length = 120
extend-ignore = ["E203", "W503"]
extend-exclude = [
    "cmip6-cmor-tables/*",
    "CMIP7_DReq_Software/*",
    "_version.py",
    "versioneer.py",
]
per-file-ignores = [
    # Allow Black's preferred whitespace in slices
    "*/_version.py:E203",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pycmor",
    "--cov-report=term-missing",
    "-m", "not slow",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
filterwarnings = [
    "ignore:Import\\(s\\) unavailable to set up matplotlib support:UserWarning",
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/pycmor"]
branch = true
omit = [
    "*/tests/*",
    "*/_version.py",
    "*/versioneer.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# MyPy configuration (optional, for future use)
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "pycmor.*",
]
ignore_errors = true

# Ruff configuration (optional modern linter alternative)
[tool.ruff]
target-version = "py39"
line-length = 120
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "cmip6-cmor-tables",
    "CMIP7_DReq_Software",
    "_version.py",
    "versioneer.py",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["pycmor"]
