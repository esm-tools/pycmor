# For more information see: https://tinyurl.com/mr4y7r8n
name: Run Basic Tests
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # Setup job for linting and formatting checks
  lint_and_format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install black flake8 pytest isort yamllint
      - name: Install package for linting
        run: |
          python -m pip install .[dev]
      - name: Lint with flake8 (syntax errors only)
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Run full flake8 check
        run: |
          # stop at any error
          flake8 . --show-source --statistics --exclude ./cmip6-cmor-tables,./build,_version.py,./src/pymorize/webapp.py,./CMIP7_DReq_Software
      - name: Run isort
        run: |
          isort --profile black --check --skip ./cmip6-cmor-tables --skip ./versioneer.py --skip ./CMIP7_DReq_Software .
      - name: Run black
        run: |
          black --check --extend-exclude 'cmip6-cmor-tables|CMIP7_DReq_Software|versioneer\.py|webapp\.py' .
      - name: Run yamllint
        run: |
          yamllint .

  # Main test job that runs on multiple Python versions
  test:
    name: Test Python ${{ matrix.python-version }}
    needs: [lint_and_format]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up NetCDF4 with HDF5 support
        run: |
          sudo apt-get update
          sudo apt-get install -y libnetcdf-dev libhdf5-dev
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if ${{ matrix.python-version == '3.12' }}; then pip install --upgrade setuptools; fi
      - name: Install package
        run: |
          python -m pip install ".[dev, fesom]"
      - name: Test if data will work (Meta-Test)
        run: |
          export HDF5_DEBUG=1
          export NETCDF_DEBUG=1
          export XARRAY_ENGINE=h5netcdf
          export PREFECT_SERVER_EPHEMERAL_STARTUP_TIMEOUT_SECONDS=300
          pytest -vvv -s --cov tests/meta/*.py --cov-report=xml:coverage-meta.xml
      - name: Test with pytest (Unit)
        run: |
          export XARRAY_ENGINE=h5netcdf
          export PREFECT_SERVER_EPHEMERAL_STARTUP_TIMEOUT_SECONDS=300
          pytest -vvv -s --cov tests/unit/*.py --cov-report=xml:coverage-unit1.xml
          pytest -vvv -s --cov tests/unit/data_request/*.py --cov-report=xml:coverage-unit2.xml
      - name: Test with pytest (Integration)
        run: |
          export XARRAY_ENGINE=h5netcdf
          export PREFECT_SERVER_EPHEMERAL_STARTUP_TIMEOUT_SECONDS=300
          pytest -vvv -s --cov tests/integration/*.py --cov-report=xml:coverage-integration.xml
      - name: Test with doctest
        run: |
          export PREFECT_SERVER_EPHEMERAL_STARTUP_TIMEOUT_SECONDS=300
          PYTHONPATH=src pytest -v --doctest-modules src/ --cov=src/pymorize --cov-report=xml:coverage-doctest.xml
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: coverage-*.xml

  # Combined test coverage report
  coverage:
    name: Generate Coverage Report
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov coverage
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
      - name: Process coverage reports
        run: |
          # Create directories for each Python version
          mkdir -p coverage-output/3.9 coverage-output/3.10 coverage-output/3.11 coverage-output/3.12

          # Process each Python version separately
          for version in 3.9 3.10 3.11 3.12; do
            # Combine coverage files for this version
            find coverage-reports/coverage-reports-$version/ -name "*.xml" -exec python -m coverage combine {} \;
            # Generate XML report for this version
            python -m coverage xml -o coverage-output/$version/coverage.xml
            # Reset coverage data for next version
            python -m coverage erase
          done
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage-output/
          fail_ci_if_error: false
          flags: python-3.9,python-3.10,python-3.11,python-3.12
