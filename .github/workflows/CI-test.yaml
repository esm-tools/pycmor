# For more information see: https://tinyurl.com/mr4y7r8n
name: Run Basic Tests
on:
  push:
    branches: ["main", "prep-release"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main", "prep-release"]
jobs:
  # Setup job for linting and formatting checks
  lint_and_format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install black flake8 pytest isort yamllint
      - name: Install package for linting
        run: |
          python -m pip install .[dev]
      - name: Lint with flake8 (syntax errors only)
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Run full flake8 check
        run: |
          # stop at any error
          flake8 . --show-source --statistics --exclude ./cmip6-cmor-tables,./build,_version.py,./src/pycmor/webapp.py,./CMIP7_DReq_Software
      - name: Run isort
        run: |
          isort --profile black --check --skip ./cmip6-cmor-tables --skip ./versioneer.py --skip ./CMIP7_DReq_Software .
      - name: Run black
        run: |
          black --check --extend-exclude 'cmip6-cmor-tables|CMIP7_DReq_Software|versioneer\.py|webapp\.py' .
      - name: Run yamllint
        run: |
          yamllint .
  # Meta test job - checks if data loading works (runs first for each Python version)
  test-meta:
    name: Meta Test Python ${{ matrix.python-version }}
    needs: [lint_and_format]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker test image for Python ${{ matrix.python-version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          load: true
          tags: pycmor-test:py${{ matrix.python-version }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
          cache-from: type=gha,scope=py${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=py${{ matrix.python-version }}
      - name: Test if data will work (Meta-Test)
        run: |
          docker run --rm pycmor-test:py${{ matrix.python-version }} pytest -vvv -s --cov=src/pycmor tests/meta/**.py
      - name: Generate and extract coverage report
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace pycmor-test:py${{ matrix.python-version }} bash -c "python -m coverage xml -o /workspace/coverage-meta-${{ matrix.python-version }}.xml"
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-meta-${{ matrix.python-version }}
          path: coverage-meta-${{ matrix.python-version }}.xml
  # Unit test job - runs in parallel with integration (after meta passes)
  test-unit:
    name: Unit Test Python ${{ matrix.python-version }}
    needs: [test-meta]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker test image for Python ${{ matrix.python-version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          load: true
          tags: pycmor-test:py${{ matrix.python-version }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
          cache-from: type=gha,scope=py${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=py${{ matrix.python-version }}
      - name: Test with pytest (Unit)
        run: |
          docker run --rm pycmor-test:py${{ matrix.python-version }} pytest -vvv -s --cov=src/pycmor tests/unit/**.py
      - name: Generate and extract coverage report
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace pycmor-test:py${{ matrix.python-version }} bash -c "python -m coverage xml -o /workspace/coverage-unit-${{ matrix.python-version }}.xml"
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-unit-${{ matrix.python-version }}
          path: coverage-unit-${{ matrix.python-version }}.xml
  # Integration test job - runs in parallel with unit (after meta passes)
  test-integration:
    name: Integration Test Python ${{ matrix.python-version }}
    needs: [test-meta]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker test image for Python ${{ matrix.python-version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          load: true
          tags: pycmor-test:py${{ matrix.python-version }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
          cache-from: type=gha,scope=py${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=py${{ matrix.python-version }}
      - name: Test with pytest (Integration)
        run: |
          docker run --rm pycmor-test:py${{ matrix.python-version }} pytest -vvv -s --cov=src/pycmor tests/integration/**.py
      - name: Generate and extract coverage report
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace pycmor-test:py${{ matrix.python-version }} bash -c "python -m coverage xml -o /workspace/coverage-integration-${{ matrix.python-version }}.xml"
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-integration-${{ matrix.python-version }}
          path: coverage-integration-${{ matrix.python-version }}.xml
  # Doctest job - runs in parallel with unit/integration (after meta passes)
  test-doctest:
    name: Doctest Python ${{ matrix.python-version }}
    needs: [test-meta]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Docker test image for Python ${{ matrix.python-version }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.test
          push: false
          load: true
          tags: pycmor-test:py${{ matrix.python-version }}
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
          cache-from: type=gha,scope=py${{ matrix.python-version }}
          cache-to: type=gha,mode=max,scope=py${{ matrix.python-version }}
      - name: Test with doctest
        run: |
          docker run --rm pycmor-test:py${{ matrix.python-version }} bash -c "PYTHONPATH=src pytest -v --doctest-modules --cov=src/pycmor src/"
      - name: Generate and extract coverage report
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace pycmor-test:py${{ matrix.python-version }} bash -c "python -m coverage xml -o /workspace/coverage-doctest-${{ matrix.python-version }}.xml"
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-doctest-${{ matrix.python-version }}
          path: coverage-doctest-${{ matrix.python-version }}.xml
  post-status:
    name: Post Status for other jobs
    needs: [lint_and_format, test-unit, test-integration, test-doctest]
    runs-on: ubuntu-latest
    steps:
      - name: Set output for lint and test status
        id: set-output
        run: |
          echo "::set-output name=test_status::success"
          echo "::set-output name=lint_status::success"
          echo "lint_status=success" >> $GITHUB_ENV
          echo "test_status=success" >> $GITHUB_ENV
          echo "lint_status=success" >> $GITHUB_OUTPUT
          echo "test_status=success" >> $GITHUB_OUTPUT
  set-output:
    name: Set Output for Ref
    runs-on: ubuntu-latest
    needs: [lint_and_format, test-unit, test-integration, test-doctest]
    outputs:
      ref: ${{ steps.set-ref.outputs.ref }}
      is_tag: ${{ steps.set-ref.outputs.is_tag }}
    steps:
      - name: Determine if Ref is a Tag
        id: set-ref
        run: |
          echo "ref=${GITHUB_REF}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
            echo "is_tag=true" >> $GITHUB_OUTPUT
          else
            echo "is_tag=false" >> $GITHUB_OUTPUT
          fi
          echo "cat ${GITHUB_OUTPUT}"
          cat $GITHUB_OUTPUT
  set-workflow-artifact:
    name: Set workflow artifact
    runs-on: ubuntu-latest
    needs: set-output
    steps:
      - name: Create artifact
        run: |
          echo "Creating artifact..."
          echo "ref=$REF"
          echo "is_tag=$IS_TAG"

          echo "ref=$REF" >> status.dat
          echo "is_tag=$IS_TAG" >> status.dat
        env:
          REF: ${{ needs.set-output.outputs.ref }}
          IS_TAG: ${{ needs.set-output.outputs.is_tag }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: status-${{ github.run_id }}
          path: status.dat
  # Combined test coverage report
  coverage:
    name: Generate Coverage Report
    needs: [test-meta, test-unit, test-integration, test-doctest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov coverage
      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports
      - name: Process coverage reports
        run: |
          # Create directories for each Python version and test type
          mkdir -p coverage-output/3.9 coverage-output/3.10 coverage-output/3.11 coverage-output/3.12

          # Copy coverage reports to their respective directories
          for version in 3.9 3.10 3.11 3.12; do
            # Combine all coverage reports for each version
            for type in meta unit integration doctest; do
              if [ -f "coverage-reports/coverage-reports-${type}-${version}/coverage-${type}-${version}.xml" ]; then
                cp coverage-reports/coverage-reports-${type}-${version}/coverage-${type}-${version}.xml coverage-output/${version}/coverage-${type}.xml
              fi
            done
          done
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          directory: ./coverage-output/
          fail_ci_if_error: false
          flags: python-3.9,python-3.10,python-3.11,python-3.12
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: esm-tools/pycmor
